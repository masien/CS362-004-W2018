Nick Masie CS 362 1/21/18 
 
Assignment 2 
 
 Refactor o Perhaps the biggest task in extracting each function was finding out which variables were used in that particular chunk of code, which tells us which variables we need to pass to the new refactored functions, and then making sure that the scopes of all the involved variables remained correct.  After this hard part was done, all I had to do was copy that chunk of code, define it in its own function above the function that uses the switch statement, add that function declaration to the header file, and finally replace the chunk of code in the switch statement with a call to the function that was just created.  Other than that, the only challenges were simple syntax errors as I was getting reacclimated to coding in C++, especially in larger programs like this one.  I also had to make sure that I actually understood what was going on in the code so that I could effectively introduce some bugs for the bugs section below.  Bugs o Adventurer  I changed the “while(drawntreasure<2)” condition to “while(drawntreasure<1).”  This will not cause any errors when running the program, but it will introduce a bug by changing the entire functionality of the adventurer card.  Instead of drawing 2 treasure cards from the deck, the player will only draw 1 treasure card from the deck. o Smithy  Similar to the bug introduced in Adventurer, I changed the condition “for (i = 0; i < 3; i++)” to “for (i = 0; i < 5; i++).”  Again, this will not cause any errors when running the program, but it will introduce a bug by changing the entire functionality of the smithy card.  Instead of drawing 3 cards, the player will draw 5 cards from their deck, giving the smithy card an unfair advantage. o Steward  I changed the line “else if (choice1 == 2)” to “else if (choice1 == 5).”  Again, this will not cause any errors when running the program, but it will introduce a bug by changing the entire functionality of the steward card.  The steward card offers the player a couple of choices, but by changing this conditional else if statement, we are restricting the player to one of those choices no matter what choice the player “thinks” they are making, in a sense.  In other words, if the player chooses the value 2 for the choice1 variable, then the else if statement for that value will not trigger because the value 5 is not even a possible choice, therefore the code will never enter this else if statement. o Remodel 
 I changed the line “if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )” to “if ( (getCost(state>hand[currentPlayer][choice1]) + 4) > getCost(choice2) ).”  Notice that the difference in these 2 conditional statements are the values +2 and +4.  Again, this will not cause any errors when running the program, but it will introduce a bug by changing the functionality of the remodel card.  The player is supposed to gain a card costing up to 2 more than the trashed card, but it seems as if this change will give the remodel card an unfair advantage by allowing the player to gain a card costing up to 4 more than the trashed card. 
