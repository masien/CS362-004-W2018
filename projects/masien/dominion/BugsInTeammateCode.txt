Bug Report: Find and report at least two (2) bugs.  Document the process of identifying and fixing a bug in your own code, and mention your code changes.  You may start with a bug report from a teammate or from your own testing.  Show how you used a debugger (e.g., GDB, or another debugger tool) to understand and debug your code.

As described above in the “Debugging” section, the two bugs that I found in my teammate’s refactored dominion code were: 1) in the executeAdventurer() function, where the function caused the player to potentially draw a smithy card and count that smithy card as a treasure card instead of just copper, silver, and gold, and 2) in the executeSmithy() function, where the function caused the player to draw four cards instead of only three cards like the card/rules state.

The detailed process of identifying these two bugs is described above in the “Debugging” section, but here I will go over the basic steps of reproducing the bugs, the results that we should expect to see if the functions are working properly, and then the results we actually get.

In order to reproduce the bug in the executeAdventurer() function, one simply needs to use the debugger to step through a particular game state situation where a player uses an adventurer card, reveals cards from their deck until they find two treasure cards, and reveals a smithy card before two actual treasure cards are revealed.  While stepping through the debugger as this game state situation occurs, one should notice that when a smithy card is revealed, the drawntreasure counter increments.  The rule of the adventurer card is “Reveal cards from your deck until you reveal 2 treasure cards.  Put those Treasure cards into your hand and discard the other revealed cards,” where these treasure cards should only be copper, silver, and gold.  This means that we should expect only those three cards (copper, silver, and gold) to increment the drawntreasure counter, and the player should now have two new treasure cards in the hand, but obviously we see this is not the case in this particular game state situation.  Stepping through the debugger, we see that smithy also increments the drawntreasure counter, and the player does not actually get two new treasure cards because smithy is now mistakenly counted as a treasure card.  The way to fix this bug would be to go back into the refactored executeAdventurer() function in dominion.c, and change the code on line 656 in the if statement conditions to only include copper, silver, and gold.  In other words, we need to remove the “|| cardDrawn = smithy” code from that conditional statement so that smithy does not increment the drawntreasure counter in the line below (line 657).  After implementing this fix, the values in the debugger (mainly drawntreasure counter) and the function in general should be functioning properly.

In order to reproduce the bug in the executeSmithy() function, one simply needs to use the debugger to step through literally any game state situation where a player uses the smithy card, as the function should fail just about any and every test due to the bug that was introduced.  While stepping through the debugger in virtually any game state with a smithy card, one should notice that when a smithy card is played, the player’s hand count increases by one more than it should.  The rule of the smithy card is “+3 cards,” so this means that we should expect there to be a net gain of two cards in the player’s hand (minus one for the played smithy card, and plus three for the effect of the smithy card, so three minus one equals two), but obviously this is not the case currently.  Stepping through the debugger, we see that the handCount value of the current player in the game state has a net gain of three cards because the bug in the refactored executeSmithy() function causes the player to draw four cards instead of three.  The reason for this bug is because the for-loop counter inside of the executeSmithy() function on line 673 is set to 4 instead of 3, so way to fix this bug would be to simply change the for-loop counter from “i < 4” to “i < 3” so that the call to the todrawCard() function on line 675 is only executed three times instead of four.  After implementing this fix, the values in the debugger (mainly handCount) and the function in general should be functioning properly.

