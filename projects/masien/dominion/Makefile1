CFLAGS = -Wall -fpic -coverage -lm

rngs.o: rngs.h rngs.c
	gcc -c rngs.c -g  $(CFLAGS)

dominion.o: dominion.h dominion.c rngs.o
	gcc -c dominion.c -g  $(CFLAGS)

adventurer:
	gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestadventurer.c rngs.c -o randomtestadventurer -lm -g

runAdventurer: adventurer
	./randomtestadventurer &> randomtestadventurer.out
	gcov dominion.c >> randomtestadventurer.out
	cat dominion.c.gcov >> randomtestadventurer.out

randomcard:
	gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestcard.c rngs.c -o randomtestcard -lm -g

runRandomCard: randomcard
	./randomtestcard &> randomtestcard.out
	gcov dominion.c >> randomtestcard.out
	cat dominion.c.gcov >> randomcard.out

playdom: dominion.o playdom.c
	gcc -o playdom playdom.c -g dominion.o rngs.o $(CFLAGS)

playdom2: dominion.o playdom2.c
	gcc -o playdom2 playdom2.c -g dominion.o rngs.o $(CFLAGS)

testDrawCard: testDrawCard.c dominion.o rngs.o
	gcc -o testDrawCard -g  testDrawCard.c dominion.o rngs.o $(CFLAGS)

badTestDrawCard: badTestDrawCard.c dominion.o rngs.o
	gcc -o badTestDrawCard -g  badTestDrawCard.c dominion.o rngs.o $(CFLAGS)

testBuyCard: testDrawCard.c dominion.o rngs.o
	gcc -o testDrawCard -g  testDrawCard.c dominion.o rngs.o $(CFLAGS)

testAll: dominion.o testSuite.c
	gcc -o testSuite testSuite.c -g  dominion.o rngs.o $(CFLAGS)

card1:
	gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestcard1.c rngs.c -o randomcardtest1 -lm -g

card2:
	gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestcard2.c rngs.c -o randomtestcard2 -lm -g

card3:
	gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestcard3.c rngs.c -o randomtestcard3 -lm -g

card4:
	gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestcard4.c rngs.c -o randomtestcard4 -lm -g
	
adventurer:
	gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestcardadventurer.c rngs.c -o randomtestcardadventurer -lm -g


myTest:
	./randomtestcard1 &> unittestresult.out
	./randomtestcard2 >> unittestresult.out
	./randomtestcard3 >> unittestresult.out
	./randomtestadventurer >> unittestresults.out
	gcov dominion.c >> unittestresult.out
	cat dominion.c.gcov >> unittestresult.out


unittestresults.out: card1 card2 card3 card4 adventurer
	./randomtestcard1 &> unittestresults.out
	./randomtestcard2 >> unittestresults.out
	./randomtestcard3 >> unittestresults.out
	./randomtestcard4 >> unittestresults.out
	./randomtestadventurer >> unittestresults.out
	gcov randomtestcard1.c >> unittestresults.out
	cat randomtestcard1.c.gcov >> unittestresults.out
	gcov randomtestcard2.c >> unittestresults.out
	cat randomtestcard2.c.gcov >> unittestresults.out
	gcov randomtestcard3.c >> unittestresults.out
	cat randomtestcard3.c.gcov >> unittestresults.out
	gcov randomtestcard4.c >> unittestresults.out
	cat randomtestcard4.c.gcov >> unittestresults.out
	gcov randomtestadventurer.c >> unittestresults.out
	cat randomtestadventurer.c.gcov >> unittestresults.out
	gcov dominion.c >> unittestresults.out
	cat dominion.c.gcov >> unittestresults.out
	
interface.o: interface.h interface.c
	gcc -c interface.c -g  $(CFLAGS)

runtests: testDrawCard 
	./testDrawCard &> unittestresult.out
	gcov dominion.c >> unittestresult.out
	cat dominion.c.gcov >> unittestresult.out


player: player.c interface.o
	gcc -o player player.c -g  dominion.o rngs.o interface.o $(CFLAGS)

all: playdom player testDrawCard testBuyCard badTestDrawCard unittestresults.out

clean:
	rm -f *.o playdom.exe playdom test.exe test player randomtestcard1 randomtestcard2 randomtestcard3 randomtestcard4 randomtestadventurer player.exe testInit testInit.exe *.gcov *.gcda *.gcno *.so
